Index: src/main/java/org/practic/_06_09_23/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/practic/_06_09_23/Main.java b/src/main/java/org/practic/_06_09_23/Main.java
new file mode 100644
--- /dev/null	(date 1694430569110)
+++ b/src/main/java/org/practic/_06_09_23/Main.java	(date 1694430569110)
@@ -0,0 +1,45 @@
+package org.practic._06_09_23;
+
+import java.util.Arrays;
+
+public class Main {
+  public static void main(String[] args) {
+    House house = new House(21, 99, 10000, "BSHStr");
+    House house2 = new House(22, 45, 147650, "LolStr");
+    House house3 = new House(23, 69, 16700, "Permoserweg");
+    House house4 = new House(24, 88, 10456, "WendelsteinStr");
+    System.out.println(house);
+    System.out.println(house2);
+    System.out.println(house3);
+    System.out.println(house4);
+    System.out.println();
+
+    House[] h = {house, house2, house3, house4};
+    Arrays.sort(h);
+    for (House i : h) {
+
+      System.out.println(i);
+    }
+  }
+}
+
+//Необходимо продемонстрировать работу интерфейсв Comparable на примере класса House.
+//
+//1.Создать класс House с 4 полями: номер дома, площадь дома, цена дома, город
+//2. Переопределить метод toString(),
+// что бы можно было распечатать объект House в читабельном виде
+//3. Имплементировать интерфейс Comparable
+//4. Создать основной класс Main внутри которого создать несколько разных объектов типа House
+//5. Отсортировать список домов по площади дома, реализовав метод
+// compareTo с использование if
+//5*  Отсортировать список домов по площади дома методом класса обертки
+// возвращаемого типа метода compareTo
+//6. Отсортировать список по названию городов
+//7. Написать реализацию метода compareTo так, что бы учитывалось при сравнении 3 поля:
+// number, area, city
+// - если номера домов разные, то сортируем по номеру дома
+// - если номера домов одинаковые, то сортируем по площади
+//  - если площади разные, сортируем по площади, если одинаковые,
+//  то сортируем по названию города
+//
+//Подсказка: в методе compareTo будет 3 логических части
\ No newline at end of file
Index: src/main/java/org/practic/_23_09_08/robots/Robots.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/practic/_23_09_08/robots/Robots.java b/src/main/java/org/practic/_23_09_08/robots/Robots.java
new file mode 100644
--- /dev/null	(date 1694430569101)
+++ b/src/main/java/org/practic/_23_09_08/robots/Robots.java	(date 1694430569101)
@@ -0,0 +1,7 @@
+package org.practic._23_09_08.robots;
+
+import org.practic._23_09_08.interfaces.Repair;
+import org.practic._23_09_08.interfaces.Updates;
+
+public class Robots implements Repair, Updates {
+}
Index: src/main/java/org/practic/_23_09_08/interfaces/Updates.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/practic/_23_09_08/interfaces/Updates.java b/src/main/java/org/practic/_23_09_08/interfaces/Updates.java
new file mode 100644
--- /dev/null	(date 1694430569105)
+++ b/src/main/java/org/practic/_23_09_08/interfaces/Updates.java	(date 1694430569105)
@@ -0,0 +1,4 @@
+package org.practic._23_09_08.interfaces;
+
+public interface Updates {
+}
Index: src/main/java/org/practic/_23_09_08/interfaces/Runing.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/practic/_23_09_08/interfaces/Runing.java b/src/main/java/org/practic/_23_09_08/interfaces/Runing.java
new file mode 100644
--- /dev/null	(date 1694430569098)
+++ b/src/main/java/org/practic/_23_09_08/interfaces/Runing.java	(date 1694430569098)
@@ -0,0 +1,4 @@
+package org.practic._23_09_08.interfaces;
+
+public interface Runing {
+}
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>### IntelliJ IDEA ###\n.idea\ntarget
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
--- a/.gitignore	(revision 8611068ae96875daffb0ae69b0e8d5cc49e9f895)
+++ b/.gitignore	(date 1694430569055)
@@ -1,3 +1,38 @@
+target/
+!.mvn/wrapper/maven-wrapper.jar
+!**/src/main/**/target/
+!**/src/test/**/target/
+
 ### IntelliJ IDEA ###
-.idea
-target
\ No newline at end of file
+.idea/modules.xml
+.idea/jarRepositories.xml
+.idea/compiler.xml
+.idea/libraries/
+*.iws
+*.iml
+*.ipr
+
+### Eclipse ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+build/
+!**/src/main/**/build/
+!**/src/test/**/build/
+
+### VS Code ###
+.vscode/
+
+### Mac OS ###
+.DS_Store
\ No newline at end of file
Index: src/main/java/org/practic/_23_09_08/interfaces/Play.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/practic/_23_09_08/interfaces/Play.java b/src/main/java/org/practic/_23_09_08/interfaces/Play.java
new file mode 100644
--- /dev/null	(date 1694430569095)
+++ b/src/main/java/org/practic/_23_09_08/interfaces/Play.java	(date 1694430569095)
@@ -0,0 +1,4 @@
+package org.practic._23_09_08.interfaces;
+
+public interface Play {
+}
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>org.example</groupId>\n  <artifactId>_300523-m-be</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <packaging>jar</packaging>\n\n  <name>_300523-m-be</name>\n  <url>http://maven.apache.org</url>\n\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  </properties>\n\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n      <scope>test</scope>\n    </dependency>\n      <dependency>\n          <groupId>org.projectlombok</groupId>\n          <artifactId>lombok</artifactId>\n          <version>1.18.28</version>\n      </dependency>\n  </dependencies>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <configuration>\n                    <source>8</source>\n                    <target>8</target>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	(revision 8611068ae96875daffb0ae69b0e8d5cc49e9f895)
+++ b/pom.xml	(date 1694430569060)
@@ -10,9 +10,11 @@
   <name>_300523-m-be</name>
   <url>http://maven.apache.org</url>
 
-  <properties>
-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-  </properties>
+    <properties>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+        <maven.compiler.source>20</maven.compiler.source>
+        <maven.compiler.target>20</maven.compiler.target>
+    </properties>
 
   <dependencies>
     <dependency>
Index: src/main/java/org/practic/_23_09_08/animal/Dog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/practic/_23_09_08/animal/Dog.java b/src/main/java/org/practic/_23_09_08/animal/Dog.java
new file mode 100644
--- /dev/null	(date 1694430569088)
+++ b/src/main/java/org/practic/_23_09_08/animal/Dog.java	(date 1694430569088)
@@ -0,0 +1,7 @@
+package org.practic._23_09_08.animal;
+
+import org.practic._23_09_08.interfaces.Play;
+import org.practic._23_09_08.interfaces.Runing;
+
+public class Dog extends Animal implements Play, Runing {
+}
Index: src/main/java/org/practic/_23_09_08/animal/Kitten.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/practic/_23_09_08/animal/Kitten.java b/src/main/java/org/practic/_23_09_08/animal/Kitten.java
new file mode 100644
--- /dev/null	(date 1694430569092)
+++ b/src/main/java/org/practic/_23_09_08/animal/Kitten.java	(date 1694430569092)
@@ -0,0 +1,7 @@
+package org.practic._23_09_08.animal;
+
+import org.practic._23_09_08.interfaces.Play;
+import org.practic._23_09_08.interfaces.Runing;
+
+public class Kitten extends Animal implements Play, Runing {
+}
Index: src/main/java/org/practic/_23_09_08/human/Human.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/practic/_23_09_08/human/Human.java b/src/main/java/org/practic/_23_09_08/human/Human.java
new file mode 100644
--- /dev/null	(date 1694430569073)
+++ b/src/main/java/org/practic/_23_09_08/human/Human.java	(date 1694430569073)
@@ -0,0 +1,8 @@
+package org.practic._23_09_08.human;
+
+import org.practic._23_09_08.interfaces.MakeSound;
+import org.practic._23_09_08.interfaces.Play;
+import org.practic._23_09_08.interfaces.Runing;
+
+public class Human implements Play, Runing, MakeSound {
+}
Index: src/main/java/org/practic/_23_09_08/human/Child.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/practic/_23_09_08/human/Child.java b/src/main/java/org/practic/_23_09_08/human/Child.java
new file mode 100644
--- /dev/null	(date 1694430569077)
+++ b/src/main/java/org/practic/_23_09_08/human/Child.java	(date 1694430569077)
@@ -0,0 +1,7 @@
+package org.practic._23_09_08.human;
+
+import org.practic._23_09_08.interfaces.Play;
+import org.practic._23_09_08.interfaces.Runing;
+
+public class Child extends Human implements Play, Runing {
+}
Index: src/main/java/org/practic/_23_09_08/animal/Cat.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/practic/_23_09_08/animal/Cat.java b/src/main/java/org/practic/_23_09_08/animal/Cat.java
new file mode 100644
--- /dev/null	(date 1694430569069)
+++ b/src/main/java/org/practic/_23_09_08/animal/Cat.java	(date 1694430569069)
@@ -0,0 +1,7 @@
+package org.practic._23_09_08.animal;
+
+import org.practic._23_09_08.interfaces.Play;
+import org.practic._23_09_08.interfaces.Runing;
+
+public class Cat extends Animal implements Play, Runing {
+}
Index: src/main/java/org/practic/_23_09_08/animal/Animal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/practic/_23_09_08/animal/Animal.java b/src/main/java/org/practic/_23_09_08/animal/Animal.java
new file mode 100644
--- /dev/null	(date 1694430569064)
+++ b/src/main/java/org/practic/_23_09_08/animal/Animal.java	(date 1694430569064)
@@ -0,0 +1,8 @@
+package org.practic._23_09_08.animal;
+
+import org.practic._23_09_08.interfaces.MakeSound;
+import org.practic._23_09_08.interfaces.Play;
+import org.practic._23_09_08.interfaces.Runing;
+
+public class Animal implements Play, Runing, MakeSound {
+}
Index: src/main/java/org/practic/_23_09_08/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/practic/_23_09_08/Main.java b/src/main/java/org/practic/_23_09_08/Main.java
new file mode 100644
--- /dev/null	(date 1694430569048)
+++ b/src/main/java/org/practic/_23_09_08/Main.java	(date 1694430569048)
@@ -0,0 +1,4 @@
+package org.practic._23_09_08;
+
+public class Main {
+}
Index: src/main/java/org/example/_2023_08_28/Main1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example._2023_08_28;\n\npublic class Main1 {\n    int a = 5;\n    static String s = \"hello\";\n\n    // x = 10\n    // x + y = 25\n    //\n    private static void m1(int a) {\n        // save(a)\n    }\n\n    public void get(int a) {\n        m1(a);\n        System.out.println(a + 15);\n    }\n\n    public int returnMinValue(int[] array) {\n        int min = array[0];\n\n        for (int i = 1; i < array.length; i++) {\n            if (array[i] < min) {\n                min = array[i];\n            }\n        }\n\n        return min;\n    }\n\n    public int[] m2() {\n        return null;\n    }\n\n    private int sumArray(int[] array) {\n        if (array.length == 0) {\n            return 0;\n        }\n        int left = 0;\n        int right = array.length - 1;\n        int sum = 0;\n\n        while (left <= right) {\n            if (left == right) {\n                sum += array[left];\n                break;\n            } else {\n                sum = sum + array[left] + array[right];\n                left++;\n                right--;\n            }\n        }\n        return sum;\n    }\n\n    public int returnSum (int[] arr) {\n        if (arr.length == 0) return 0;\n        int result = 0;\n\n        if (arr.length%2==1){\n            result = arr[arr.length/2];\n        }\n\n        for (int i = 0; i < arr.length/2; i++) {\n            result += arr[i] + arr[arr.length-1-i];\n        }\n        return result;\n    }\n\n\n    public static void main(String[] args) {\n        int[] qaa = {31, 21, 45, 6, 98, 7};\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/_2023_08_28/Main1.java b/src/main/java/org/example/_2023_08_28/Main1.java
--- a/src/main/java/org/example/_2023_08_28/Main1.java	(revision 8611068ae96875daffb0ae69b0e8d5cc49e9f895)
+++ b/src/main/java/org/example/_2023_08_28/Main1.java	(date 1694430569132)
@@ -28,47 +28,8 @@
         return min;
     }
 
-    public int[] m2() {
-        return null;
-    }
-
-    private int sumArray(int[] array) {
-        if (array.length == 0) {
-            return 0;
-        }
-        int left = 0;
-        int right = array.length - 1;
-        int sum = 0;
-
-        while (left <= right) {
-            if (left == right) {
-                sum += array[left];
-                break;
-            } else {
-                sum = sum + array[left] + array[right];
-                left++;
-                right--;
-            }
-        }
-        return sum;
-    }
-
-    public int returnSum (int[] arr) {
-        if (arr.length == 0) return 0;
-        int result = 0;
-
-        if (arr.length%2==1){
-            result = arr[arr.length/2];
-        }
-
-        for (int i = 0; i < arr.length/2; i++) {
-            result += arr[i] + arr[arr.length-1-i];
-        }
-        return result;
-    }
-
-
     public static void main(String[] args) {
-        int[] qaa = {31, 21, 45, 6, 98, 7};
+        int[] qaa = {3, 21, 45, 6, 98, 7};
+        System.out.println(new Main1().returnMinValue(qaa));
     }
 }
\ No newline at end of file
Index: src/main/java/org/practic/_23_09_08/interfaces/MakeSound.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/practic/_23_09_08/interfaces/MakeSound.java b/src/main/java/org/practic/_23_09_08/interfaces/MakeSound.java
new file mode 100644
--- /dev/null	(date 1694430569138)
+++ b/src/main/java/org/practic/_23_09_08/interfaces/MakeSound.java	(date 1694430569138)
@@ -0,0 +1,4 @@
+package org.practic._23_09_08.interfaces;
+
+public interface MakeSound {
+}
Index: src/main/java/org/practic/_23_09_08/interfaces/Repair.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/practic/_23_09_08/interfaces/Repair.java b/src/main/java/org/practic/_23_09_08/interfaces/Repair.java
new file mode 100644
--- /dev/null	(date 1694430569135)
+++ b/src/main/java/org/practic/_23_09_08/interfaces/Repair.java	(date 1694430569135)
@@ -0,0 +1,4 @@
+package org.practic._23_09_08.interfaces;
+
+public interface Repair {
+}
Index: src/main/java/org/practic/_23_09_08/human/Man.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/practic/_23_09_08/human/Man.java b/src/main/java/org/practic/_23_09_08/human/Man.java
new file mode 100644
--- /dev/null	(date 1694430569137)
+++ b/src/main/java/org/practic/_23_09_08/human/Man.java	(date 1694430569137)
@@ -0,0 +1,7 @@
+package org.practic._23_09_08.human;
+
+import org.practic._23_09_08.interfaces.Play;
+import org.practic._23_09_08.interfaces.Runing;
+
+public class Man extends Human implements Play, Runing {
+}
Index: src/main/java/org/practic/_06_09_23/House.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/practic/_06_09_23/House.java b/src/main/java/org/practic/_06_09_23/House.java
new file mode 100644
--- /dev/null	(date 1694430569113)
+++ b/src/main/java/org/practic/_06_09_23/House.java	(date 1694430569113)
@@ -0,0 +1,70 @@
+package org.practic._06_09_23;
+
+import java.util.NoSuchElementException;
+
+public class House implements Comparable<House> {
+  private int houseNumber;
+  private int square;
+  private double price;
+  private String street;
+
+  public House(int houseNumber, int square, double price, String street) {
+    this.houseNumber = houseNumber;
+    this.square = square;
+    this.price = price;
+    this.street = street;
+  }
+
+  @Override
+  public String toString() {
+    return "House{" +
+            "houseNumber=" + houseNumber +
+            ", square=" + square +
+            ", price=" + price +
+            ", street='" + street + '\'' +
+            '}';
+  }
+
+  public int getHouse() {
+    return houseNumber;
+  }
+
+  public void setHouse(int houseNumber) {
+    this.houseNumber = houseNumber;
+  }
+
+  public double getSquare() {
+    return square;
+  }
+
+  public void setSquare(int square) {
+    this.square = square;
+  }
+
+  public double getPrice() {
+    return price;
+  }
+
+  public void setPrice(double price) {
+    this.price = price;
+  }
+
+  public String getStreet() {
+    return street;
+  }
+
+  public void setStreet(String street) {
+    this.street = street;
+  }
+
+  @Override
+  public int compareTo(House o) {
+    if (this.square == o.square) {
+      return 0;
+    } else if (this.square < o.square) {
+      return 1;
+    }else {
+      return -1;
+    }
+  }
+}
Index: src/main/java/org/practic/_23_09_08/human/Women.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/practic/_23_09_08/human/Women.java b/src/main/java/org/practic/_23_09_08/human/Women.java
new file mode 100644
--- /dev/null	(date 1694430569118)
+++ b/src/main/java/org/practic/_23_09_08/human/Women.java	(date 1694430569118)
@@ -0,0 +1,7 @@
+package org.practic._23_09_08.human;
+
+import org.practic._23_09_08.interfaces.Play;
+import org.practic._23_09_08.interfaces.Runing;
+
+public class Women extends Human implements Play, Runing {
+}
